#+TITLE: libc - clock_getres&clock_gettime&clock_settime 函数说明
#+OPTIONS: ^:nil
#+STARTUP: indent overview

* 函数功能
用于获取&修改各种类型的时钟。

* 函数原型
  #+BEGIN_SRC C
  #include <time.h>
  int clock_getres(clockid_t clk_id, struct timespec *res);
  int clock_gettime(clockid_t clk_id, struct timespec *tp);
  int clock_settime(clockid_t clk_id, const struct timespec *tp);
  #+END_SRC

* 函数细节

** 参数说明
   #+CAPTION: 参数说明
   | 参数   | 类型              | 说明                     |
   |--------+-------------------+--------------------------|
   | clk_id | clockid_t         | 时钟种类                 |
   | res    | struct timespec * | 时钟的精度               |
   | tp     | struct timespec * | 设置或获取时钟的参数指针 |

** 结构体说明
#+BEGIN_SRC C
struct timespec {
time_t tv_sec;    // 秒
long   tv_nsec;   // 纳妙 10^-9sec
}
#+END_SRC

** clockid_t
其中clockid_tz设定支持的不同时钟类型，其中支持系统级别的时钟
(system-wide)，该时钟可以被系统的所有进程所使用；或者支持一个进程级别
的时钟(per-process)，该时钟只有被一个进程所使用。

*** CLOCK_REALTIME
系统级别的实时时钟，也叫为墙壁时钟(wall-clock)。需要特殊的权限才能修改
该时钟。例如管理员修改系统时间，adjtime或者NTP服务。
*** CLOCK_REALTIME_COARSE
快速墙壁时钟，但是较少精度的准确性。
*** CLOCK_MONOTONIC
单调时钟，从开机开始算起。该时钟不能通过修改系统时间修改，但是可以通
adjtime(3)和NTP服务修改。
*** CLOCK_MONOTONIC_COARSE
快速单调时钟，但是具有较低的准确性。
*** CLOCK_MONOTONIC_RAW
类似CLOCK_MONOTONIC时钟，提供硬件级别的时钟，不能通过adjtime和NTP修改
该时钟。
*** CLOCK_BOOTTIME
类似于CLOCK_MONOTONIC时钟，而且包括系统暂停的时钟。
*** CLOCK_PROCESS_CPUTIME_ID
高精度的进程级别的时钟。
*** CLOCK_THREAD_CPUTIME_ID
高精度的线程级别的时钟。
  
